// CHECKSTYLE:OFF
/**
 * Source code generated by Fluent Builders Generator
 * Do not modify this file
 * See generator home page at: http://code.google.com/p/fluent-builders-generator-eclipse-plugin/
 */

package com.wmsi.sgx.model.distribution;

import java.util.ArrayList;
import java.util.List;

public class DistributionsBuilder extends DistributionsBuilderBase<DistributionsBuilder>{
	public static DistributionsBuilder distributions() {
		return new DistributionsBuilder();
	}

	public DistributionsBuilder(){
		super(new Distributions());
	}

	public Distributions build() {
		return getInstance();
	}
}

class DistributionsBuilderBase<GeneratorT extends DistributionsBuilderBase<GeneratorT>> {
	private Distributions instance;

	protected DistributionsBuilderBase(Distributions aInstance){
		instance = aInstance;
	}

	protected Distributions getInstance() {
		return instance;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withDistributions(List<Distribution> aValue) {
		instance.setDistributions(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withAddedDistribution(Distribution aValue) {
		if(instance.getDistributions() == null){
			instance.setDistributions(new ArrayList<Distribution>());
		}

		((ArrayList<Distribution>) instance.getDistributions()).add(aValue);

		return (GeneratorT) this;
	}

	public AddedDistributionDistributionBuilder withAddedDistribution() {
		Distribution obj = new Distribution();

		withAddedDistribution(obj);

		return new AddedDistributionDistributionBuilder(obj);
	}

	public class AddedDistributionDistributionBuilder extends
			DistributionBuilderBase<AddedDistributionDistributionBuilder>{
		public AddedDistributionDistributionBuilder(Distribution aInstance){
			super(aInstance);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT endDistribution() {
			return (GeneratorT) DistributionsBuilderBase.this;
		}
	}

	public static class DistributionBuilderBase<GeneratorT extends DistributionBuilderBase<GeneratorT>> {
		private Distribution instance;

		protected DistributionBuilderBase(Distribution aInstance){
			instance = aInstance;
		}

		protected Distribution getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withField(String aValue) {
			instance.setField(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withBuckets(List<DistributionBucket> aValue) {
			instance.setBuckets(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedBucket(DistributionBucket aValue) {
			if(instance.getBuckets() == null){
				instance.setBuckets(new ArrayList<DistributionBucket>());
			}

			((ArrayList<DistributionBucket>) instance.getBuckets()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedBucketDistributionBucketBuilder withAddedBucket() {
			DistributionBucket obj = new DistributionBucket();

			withAddedBucket(obj);

			return new AddedBucketDistributionBucketBuilder(obj);
		}

		public class AddedBucketDistributionBucketBuilder extends
				DistributionBucketBuilderBase<AddedBucketDistributionBucketBuilder>{
			public AddedBucketDistributionBucketBuilder(DistributionBucket aInstance){
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endBucket() {
				return (GeneratorT) DistributionBuilderBase.this;
			}
		}
	}

	public static class DistributionBucketBuilderBase<GeneratorT extends DistributionBucketBuilderBase<GeneratorT>> {
		private DistributionBucket instance;

		protected DistributionBucketBuilderBase(DistributionBucket aInstance){
			instance = aInstance;
		}

		protected DistributionBucket getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withCount(Long aValue) {
			instance.setCount(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withFrom(String aValue) {
			instance.setFrom(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withKey(String aValue) {
			instance.setKey(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withTo(String aValue) {
			instance.setTo(aValue);

			return (GeneratorT) this;
		}
	}
}
